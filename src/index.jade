doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui')
    title The Temporal Dead Zone

    link(rel='stylesheet', type='text/css', href='lib/css/reveal.css')

    link(rel='stylesheet', type='text/css', href='lib/css/zenburn.css')
    link(rel='stylesheet', type='text/css', href='css/dark_sole.css')
    link(rel='stylesheet', type='text/css', href='css/sole.css')

    script(src='js/bundle.js', defer)

  body

    div.reveal
      div(class='twitter', hidden) @imurchie
      div.slides
        section(data-transition='zoom')
          h1 The<br /><strong>Temporal</strong><br />Dead<br />Zone<br />

        section
          h2 Isaac Murchie
          h3 @imurchie

        section
          h2 I work at <strong>Sauce Labs</strong>
          h3.fragment I build automation tools
          h4.fragment Particularly <strong>Appium</strong>

        section
          h2 We recently decided to rewrite the whole Node.JS server in <strong>ES2015</strong>
          h3.fragment And some <strong>ES7</strong>

        section
          h3 Along the way we got really <strong>excited</strong> about the <strong>new syntax</strong>
          h2.fragment And by <strong>we</strong> we mean <strong>I</strong>

        section(data-transition='zoom')
          h2 So, what is <strong>new</strong>?

        section
          h1 Block scoping
          h2.fragment and the <strong>Temporal Dead Zone</strong>

        section
          h2 First things first...
          h3.fragment What is the outcome of the following code fragment?
          pre.fragment
            code(data-trim, contenteditable).
              console.log(y);
              var y = 9;
          pre.fragment
            code(data-trim).
              undefined

        section
          h2 Why?
          h1.fragment <strong>Hoisting</strong>!
          pre.fragment
            code(data-trim, contenteditable).
              console.log(y);
              var y = 9;
          pre.fragment
            code(data-trim, contenteditable).
              var y;
              console.log(y);
              y = 9;

        section
          h2 Everything is function scope!
          h3.fragment So if you want a locally-scoped variable, you need an "Immediately Invoked Function Expression"
          pre.fragment
            code(data-trim).
              (function () {
                var local = 'something';
              })();
              console.log(local);
          pre.fragment
            code(data-trim).
              ReferenceError: local is not defined

        section
          h1 Enter <br /><strong>block scoping</strong><br />
          h2 with <strong>let</strong> and <strong>const</strong>

        section
          h2 Returning to our code (slightly modified)...
          h3.fragment What is the outcome of the following code fragment?
          pre.fragment
            code(data-trim, contenteditable).
              console.log(y);
              let y = 9;
          pre.fragment
            code(data-trim).
              ReferenceError: can't access lexical declaration
              'y' before initialization
          h4.fragment This <strong>ReferenceError</strong> <em>is</em> the <strong>Temporal Dead Zone</strong>

        section
          h2 Further, consider this...
          pre
            code(data-trim).
              let y = 99;
              console.log(y);
              if (true) {
                let y = 42;
                console.log(y);
              }
              console.log(y);
          pre.fragment
            code(data-trim).
              99
              42
              99

        section(data-background='img/dwyer.gif')

        section
          h2 One further note...
          h3.fragment What happens with <strong>var</strong> and <strong>for</strong>?
          pre.fragment
            code(data-trim).
              for (var i = 0; i < 3; i++) {
                setTimeout(function () {
                  console.log(i);
                }, 0);
              }
          pre.fragment
            code(data-trim).
              2
              2
              2

        section
          h2 And with <strong>let</strong>?
          pre.fragment
            code(data-trim).
              for (let i = 0; i < 3; i++) {
                setTimeout(function () {
                  console.log(i);
                }, 0);
              }
          pre.fragment
            code(data-trim).
              0
              1
              2

        section(data-background='img/dwyer.gif')

        section
          h2 So, with <strong>let</strong> (and <strong>const</strong>) we get real C-like scoping in JavaScript!
          h3 If you're anything like me, this is exciting news!!!!
          h4.fragment (Like, four exclamation point exciting!!!!)

        section
          h3 Technically speaking, <strong>hoisting</strong> still occurs, as the spec notes (§13.3.1)
          blockquote The variables are created when their containing Lexical Environment is instantiated
          h3 but with the added note that they can't be used before they are initialized
          blockquote but may not be accessed in any way until the variable’s LexicalBinding is evaluated

        section
          h2 But what else is there in <strong>ES2015</strong>?

        section(data-transition='zoom')
          h1 <strong>Arrow functions</strong>

        section
          pre
            code(data-trim).
              fs.readFile(function (data) {
                console.log(`Doin stuffs with ${data}`);
              });
          h3.fragment becomes
          pre.fragment
            code(data-trim).
              fs.readFile((data) => {
                console.log(`Doin stuffs with ${data} too`);
              });

        section
          h2 It's <strong>shorter</strong>!
          h3.fragment But as they said...
          h3.fragment अर्धमात्रालाघवे पुत्रोत्सवं मन्यन्ते वैकाणा: (परिभाषेन्दुशेखखर १२२)

        section
          h2 more importantly, the function lexically inherits its <strong>this</strong> reference from the surrounding scope!
          h3.fragment No more
          pre.fragment
            code(data-trim).
              var that = this;
          h3.fragment or
          pre.fragment
            code(data-trim).
              function () {
                // ...
              }.bind(this);

        section(data-transition='zoom')
          h1 <strong>spread</strong>/<strong>rest</strong>

        section
          h3 Ever needed to use <strong>Function.apply</strong> to spread out an array into named parameters?
          pre.fragment
            code(data-trim).
              function foo (x, y, z) {
                console.log(x, y, z);
              }
          pre.fragment
            code(data-trim).
              foo.apply(null, [1, 2, 3]);
          pre.fragment
            code(data-trim).
              foo(...[1, 2, 3]);
          pre.fragment
            code(data-trim).
              1 2 3

        section
          h3 As the "spread" operator, <strong>...</strong>, takes an array and produces a series of individual values
          h4.fragment For function call
          pre.fragment
            code(data-trim).
              foo (...[1, 2, 3]) => foo (1, 2, 3)
          h4.fragment But also for assignment and other expressions!
          pre.fragment
            code(data-trim).
              let inner = [2, 3, 4];
              let outer = [1, ...inner, 5];
              console.log(outer);
          pre.fragment
            code(data-trim).
              Array [1, 2, 3, 4, 5]

        section
          h3 Ever needed to use <strong>arguments</strong> to get a variable number of arguments in a function?
          pre.fragment
            code(data-trim).
              function foo () {
                var args = Array.prototype.slice.call(arguments);
                console.log(args);
              }
              foo(1, 2, 3, 4, 5);
          pre.fragment
            code(data-trim).
              function foo (...args) {
                console.log(args);
              }
              foo(1, 2, 3, 4, 5);
          pre.fragment
            code(data-trim).
              Array [ 1, 2, 3, 4, 5 ]

        section
          h3 As the "rest" operator, <strong>...</strong>, takes a bunch of values and produces an array
          h4.fragment Used in parameters of a function, either all (as above), or some of them (hence "rest")
          pre.fragment
            code(data-trim).
              function foo (first, second, ...rest) {
                console.log(first, second, rest);
              }
              foo(1, 2, 3, 4, 5);
          pre.fragment
            code(data-trim).
              1 2 Array [ 3, 4, 5 ]

        section(data-transition='zoom')
          h1 <strong>default</strong> parameter values

        section
          h3 No longer do you need to have expressions to configure default values
          pre.fragment
            code(data-trim).
              function foo (first, second) {
                first = first || 42;
                second = second || 99;

                // ...
              }
          pre.fragment
            code(data-trim).
              function foo (first = 42, second = 99) {
                // ...
              }

        section
          h4 If you omit an argument, or pass in <strong>undefined</strong> the default will be used.
          h4.fragment <strong>null</strong> will be coerced to a primitive and used

        section(data-transition='zoom')
          h1 <strong>destructuring</strong>

        section
          h3 Simplify handling of arrays and hashes
          h4.fragment Imagine you have a function that returns an array, and you want to assign the first two values to variables <strong>x</strong> and <strong>y</strong>
          pre.fragment
            code(data-trim).
              let ret = foo(),
                  x = ret[0],
                  y = ret[1];
          pre.fragment
            code(data-trim).
              let [x, y] = foo();

        section
          h4 Now imagine you have a function that returns an object/hash, and you want to assign members to variables
          pre.fragment
            code(data-trim).
              let ret = foo(),
                  x = ret.x,
                  y = ret.y;
          pre.fragment
            code(data-trim).
              let {x: x, y: y} = foo();
          pre.fragment
            code(data-trim).
              let {x, y} = foo();

        section(data-transition='zoom')
          h1 <strong>"template literals"</strong>
          h4 Such a dumb name that it couldn't even fit on that line.

        section
          h3 Think of these as like Ruby's <strong>String interpolation</strong>
          pre.fragment
            code(data-trim).
              var time = Data.now();
              console.log('The time is ' + time);
          h4.fragment Becomes...
          pre.fragment
            code(data-trim).
              let time = Data.now();
              console.log(`The time is ${time}`);

        section
          h3 Also think of these as like Ruby's <strong>heredocs</strong>
          h4.fragment Newlines are preserved!
          pre.fragment
            code(data-trim).
              let text =
              `This thought is as a death which cannot choose
              But weep to have that which it fears to lose.`

        section(data-transition='zoom')
          h1 some <strong>miscellaneous</strong> stuff I couldn't pass up

        section
          h3 Computed property names in object literals
          pre.fragment
            code(data-trim).
              function foo (key, value) {
                var obj = {};
                obj[key] = value;
                return obj;
              }
          pre.fragment
            code(data-trim).
              function foo (key, value) {
                return {
                  [key]: value;
                }
              }

        section
          h3 <strong>For .. of</strong> loops
          h4.fragment Loop over values in an array
          pre.fragment
            code(data-trim).
              let array = ['z', 'y', 'x', 'w', 'v'];
              for (let letter of array) {
                console.log(letter);
              }
          pre.fragment
            code(data-trim).
              z y x w v
          h4.fragment (compare to <strong>for .. in</strong> loops, which traverse indexes)

        section
          h3 Much better <strong>unicode</strong> support
          h4.fragment Unicode in regular expressions using <strong>/u</strong>
          h4.fragment Codepoint normalization
          h4.fragment Unicode-aware String methods

        section
          h3 Official specification (§11.8.3) of number literals in different bases
          pre.fragment
            code(data-trim).
              let decimal     = 42,
                  octal       = 0o52,
                  hexadecimal = 0x2a,
                  binary      = 0b101010;

        section(data-transition='zoom')
          h2 This has just been a quick overview of some of the syntactic changes that I have come to love in programming <strong>javascript</strong>
          h3 I'm sure there are more! Find them!

        section(data-transition='zoom')
          blockquote kthxbai

